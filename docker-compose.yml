services:
  lightrag:
    container_name: lightrag
    image: ghcr.io/hkuds/lightrag:latest
    build:
      context: ./LightRAG
      dockerfile: Dockerfile
      tags:
        - ghcr.io/hkuds/lightrag:latest
    ports:
      - "${PORT:-9621}:9621"
    volumes:
      - ./data/rag_storage:/app/data/rag_storage
      # - ./data/inputs:/app/data/inputs
      # - ./config.ini:/app/config.ini
      - ./.env:/app/.env
    env_file:
      - .env
    restart: unless-stopped
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"

  postgres:
    # Use the official PostgreSQL image from Docker Hub.
    image: postgres:16
    container_name: my_postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${LOCAL_POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${LOCAL_POSTGRES_PASSWORD:-mysecretpassword}
      POSTGRES_DB: ${LOCAL_POSTGRES_DB:-patent_monitoring}
    # Override the default command to start PostgreSQL with SSL disabled.
    command: ["postgres", "-c", "ssl=off"]
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./monitoring/sqlite_to_postgres_migration.sql:/docker-entrypoint-initdb.d/sqlite_to_postgres_migration.sql
    restart: always

# Define the Grafana analytics and monitoring service.
  grafana:
    # Use the official Grafana OSS image.
    image: grafana/grafana-oss:latest
    container_name: my_grafana
    ports:
      # Expose the Grafana web interface on port 3000.
      - "3000:3000"
    volumes:
      # Persist Grafana's configuration, dashboards, and plugins.
      - grafana-data:/var/lib/grafana
    # Ensure Grafana starts after the database is ready.
    depends_on:
      - postgres
    restart: always

# Define the named volumes used by the services.
# Using a named volume is the recommended way to persist data in Docker.
volumes:
  postgres-data:
    driver: local
  grafana-data:
    driver: local
